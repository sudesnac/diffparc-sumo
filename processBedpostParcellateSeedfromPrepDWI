#!/bin/bash

if [ "$#" -lt 5 ]
then
 echo "Usage $0 <in_bedpost_root> <parcellate_cfg> <seed_res> <nsamples> <subjid/list>"
 echo ""
 echo "List of standard parcellate_cfgs: "
 pushd $PIPELINE_CFG_DIR/parcellate > /dev/null
 ls *
 popd > /dev/null
 echo ""

 exit 0
fi

in_bedpost_root=$1  
parcellate_cfg=$2
seed_res=$3
nsamples=$4

shift 4
if [ ! -e $in_cfg ]
then
 parcellate_cfg=$PIPELINE_CFG_DIR/parcellate/$parcellate_cfg

if [ ! -e $parcellate_cfg ]
then
 echo "tract cfg $parcellate_cfg does not exist!"
 exit 0
fi

fi

echo "Sourcing $parcellate_cfg"
source $parcellate_cfg



output_dir=.

if [ -f $1 ]
then
 subjids=`cat $1`
else
 subjids=$1
fi


for subj in $subjids
do


subj_dir=$output_dir/$subj
 parc_dir=$subj_dir/bedpost.$parcellation_name
 mkdir -p $parc_dir


  bedpost_dir=$in_bedpost_root/$subj

 #config file specifies: 
   #parcellation_name
   #seed_file
   #target_seg
   #target_mapping_txt
   #target_labels_txt


 seed_mask=$subj_dir/$seed_file
 target_seg=$subj_dir/$target_seg

 #probtrack output dir
 output_dir=$parc_dir/probtrack

 targets_dir=$parc_dir/targets 
 mkdir -p $targets_dir

 if [ ! -e $target_seg ]
 then
	 echo "$target_seg does not exist!"
	 continue
 fi

 mask_file=$bedpost_dir/nodif_brain_mask.nii.gz
 sig_file=$bedpost_dir/mean_S0samples.nii.gz

 #as a precaution, create new mask based on S0
 echo fslmaths $sig_file -bin $mask_file
 fslmaths $sig_file -bin $mask_file

 ref_file=$parc_dir/seed_ref.nii.gz

 #resample to isotropic 1mm for higher-res seed space
  echo mri_convert $mask_file -vs $seed_res $seed_res $seed_res $ref_file  -rt nearest
  mri_convert $mask_file -vs $seed_res $seed_res $seed_res $ref_file  -rt nearest

  csf_t1space=$subj_dir/t1/t1.brain.inorm.fast_prob_0.nii.gz
  csf_dwispace=$parc_dir/csf_prob.nii.gz
  csf_mask=$parc_dir/csf_prob_th.nii.gz

  #get probabilistic csf segmentation
  echo reg_resample -flo $csf_t1space -ref $ref_file -res $csf_dwispace
  reg_resample -flo $csf_t1space -ref $ref_file -res $csf_dwispace

  echo fslmaths $csf_dwispace -thr 0.5 -bin $csf_mask
  fslmaths $csf_dwispace -thr 0.5 -bin $csf_mask

  echo "making ref file"

 #process for targets
 if [ "$no_remap" = "1" ]
 then
 echo octave --eval "remapSegmentationLabels('$target_seg','$target_mapping_txt','$target_labels_txt','$targets_dir',1)"
 octave --eval "remapSegmentationLabels('$target_seg','$target_mapping_txt','$target_labels_txt','$targets_dir',1)"
 else
 echo octave --eval "remapSegmentationLabels('$target_seg','$target_mapping_txt','$target_labels_txt','$targets_dir')"
 octave --eval "remapSegmentationLabels('$target_seg','$target_mapping_txt','$target_labels_txt','$targets_dir')"
 fi
targets_file=$parc_dir/targets.txt
targets_file_resampled=$parc_dir/targets_dtires.txt

rm -f $targets_file $targets_file_resampled

 for target in `ls $targets_dir/*.nii.gz`
 do 
     if echo "$target" | grep -q resampled 
     then
         #already resampled
        continue 
    fi
     #resample to DTI space (required when doing surface-based tracking..)
     resampled=${target%%.nii.gz}_resampled.nii.gz


#    echo flirt -in $target -out $resampled -applyxfm -ref $mask_file -interp nearestneighbour
#    flirt -in $target -out $resampled -applyxfm -ref $mask_file -interp nearestneighbour

    #flirt was incorrect, replace with reg_resample
    echo reg_resample -flo $target -res $resampled -ref $ref_file -NN 0
    reg_resample -flo $target -res $resampled -ref $ref_file -NN 0

    ls $target >> $targets_file
    ls $resampled >> $targets_file_resampled
 done


 #--targetmasks targets_file (txt file, each line nii.gz)

 samples_base=$bedpost_dir/merged

 seed_resampled=$parc_dir/seed_dtires.nii.gz

# echo flirt -in $seed_mask -out $seed_resampled -applyxfm -ref $mask_file -interp nearestneighbour
# flirt -in $seed_mask -out $seed_resampled -applyxfm -ref $mask_file -interp nearestneighbour

 #flirt incorrect, replace with reg_resample
 echo reg_resample -flo $seed_mask -res $seed_resampled -ref $ref_file -NN 0
 reg_resample -flo $seed_mask -res $seed_resampled -ref $ref_file -NN 0

 probtrack_opts="-l --onewaycondition -c 0.2 -S 2000 --steplength=0.5 -P $nsamples --fibthresh=0.01 --distthresh=0.0 --sampvox=0.0 --forcedir --opd --os2t --s2tastext --randfib=2"

if [ -n "$avoid_seg" ]
then
    avoid_mask=${subj_dir}/$avoid_seg
    avoid_mask_resampled=$parc_dir/avoid_mask_resampled.nii.gz
    
    if [ -e $avoid_mask ]
    then
     
     echo reg_resample -flo $avoid_mask -res $avoid_mask_resampled -ref $ref_file -NN 0
     reg_resample -flo $avoid_mask -res $avoid_mask_resampled -ref $ref_file -NN 0
     probtrack_opts="$probtrack_opts --avoid=$avoid_mask_resampled"
 else
     echo "WARNING: avoid_seg $avoid_mask not found, not using --avoid"

     fi

fi

 probtrackx2 --seedref=$seed_resampled -x  $seed_resampled --targetmasks=$targets_file_resampled -m $mask_file -s $samples_base --dir=$output_dir $probtrack_opts #--stop=$csf_mask


done #subj

